[postgresql]
; Modify these only if there are changes to the PostgreSQL server.
; In the event that the server changes IP address, change only the 'host' parameter to the server computer's public IP address.
host=5.161.79.64
database=live_database
port=5430
user=postgres
password=1234

[app_settings]
; ~~~ General app settings, generally only useful for development of fine-tuning of tasks ~~~
; The database table to insert data into
data_table=human_dec_making_table
; If the table specified above does not exist in the database, the app may be able to create it using the participant's data. If
; auto_create_table is set to 1, the app will attempt to create the target data table once it has all the required data from the user.
; If set to 0, the app will simply crash when attempting to upload data if the table does not exist in the database.
auto_create_table=1
; Enables back-to-back use of the app without the need to close and re-run startup.bat (which restarts the flask server. If set to 1,
; the app will reset all global app and user parameters to default when loading the landing portal (setup_session.html, routed as '/').
; If this option is not enabled (set to 0), the flask server must be closed and re-run. Any changes to the source code or templates are
; not affected by this option.
enable_consecutive_users=1
; Ensures that data is automatically uploaded to database after each session.
data_upload=1
; Controls where IDs are read from when trying to generate a unique ID for each user. Possible values are "database" and "local". "database"
; will look into the database and find all the unique IDs stored there. "local" will only look to the "/data/" directory to find all the
; taken IDs. The app will then generate a new random ID that does not exist in the retreived list of existing IDs.
unique_ids_from=database
; Controls where the next story index is referenced from. Possible values are "database" and "local". "database" will look into the database
; to find the next story the user will see by counting all the unique entries of 'tasktypedone'. "local" will look into the user's local
; demographic info record in '/data/' and read the 'next_story_index' entry.
next_story_from=database
; The timezone that timestamps are collected in. Recommend 'UTC', if this parameter is not set, the app will default to 'UTC'.
timestamp_timezone=UTC
; The encoding used when opening story .txt files. Change this parameter if the built-in Python method open() raises a 'UnicodeDecodeError'
; exception. This can happen if the target text file contains characters that are invalid with the chosen encoding. For example, you may
; need to change this parameter from 'utf-8' to 'utf-16' if the text file contains characters from certain East Asian languages; alternatively,
; 'latin-1' can be used in some use cases, though this encoding is more limited. If this parameter is not set, the app will default to the
; web-standard 'utf-8' encoding which encodes ASCII and Unicode characters. When testing this in our Win 11 machine, we had to set this to
; 'cp1252'.
txt_encoding=utf-8
; The minimum amount of topics that the subject must select. Replaces 'min_stories_to_choose'.
minimum_topics=4
; The number of questions selected to show the user PER STORY. This is relevant only for the cost-cost and benefit-benefit tasks, for now.
questions_per_story=16
; How the app handles story data ('pref_stories' and 'story_order') from legacy app versions. If this is set to 0, the app will NOT ignore
; legacy story data from returning users and continue the remainder of the users' sessions with only 'approach_avoid' task types, keeping
; their preferred stories and previously calculated story order.
; If set to 1, the app will discard this information and ask the user to restart their sessions to add the new task types to their story data.
ignore_legacy_story_data=0
; FOR SOCIAL TASK ONLY: Whether to randomly choose a random relationship keyword and replace it into the text of the social task stories.
; If set to 1, a random relationship keyword will be picked from the list under the 'relation_levels' list parameter and replaced into every
; snippet of text throughout the entire story.
randomise_relation_levels=1
; FOR SOCIAL TASK ONLY: The words to look for and replace in story text. The app will randomly sample a word and replace it throughout the
; entire story text.
relation_levels=['father', 'mother', 'brother', 'sister', 'cousin', 'uncle', 'aunt', 'grandfather', 'grandmother', 'friend', 'friends', 'close friend', 'family', 'son', 'daughter', 'children']
; FOR SOCIAL TASK ONLY: Stories where replacing the relationship level can be done
relation_level_stories=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
; Validates that the stories described in the 'Human DM Topics' relationship table are actually contained in '../stories/task_types/'
; Stories that don't exist in that directory will be deleted from the pool of stories that can be selected for each subject. Setting this
; parameter to 1 can cause errors if the validated story pool ends up being smaller than the sample size for each task type (see below).
; If this is the case, check that there are enough stories for each task type in '../stories/task_types/'. Conversely, not validating the
; stories increases the odds of trying to access a story that does not exist, causing a different error.
validate_stories=1
; The following 8 parameters describe how many stories are to be selected (sample size) per task type:
approach_avoid  = 12
benefit_benefit = 0
cost_cost       = 0
moral           = 0
multi_choice    = 0
obvious_supersense = 6
probability     = 0
social          = 12

[eye_tracker]
; Where in the local system the Tobii Eye Tracker Manager is installed
manager_install_path=C:\Users\{USER}\AppData\Local\Programs\TobiiProEyeTrackerManager\TobiiProEyeTrackerManager.exe
; Which eye tracker data streams to subsribe to, i.e. what eye tracker data to collect. Write these values separated by a comma and enclosed
; in square brackets, for example ['gaze','openness','position']. Only choose out of the items provided in the example.
subscriptions=['gaze','position']
; The index number of the eye tracker to connect to. Likely will not change unless more than one tracker is connected.
eyetracker_index=0
; Whether to use the eye tracker. 1 means yes, 0 means no.
use_eyetracker=0

[hr_tracker]
; Whether to use the external application to collect heart rate data. If set to 1, the app will attempt to run the program linked by the
; 'external_app_install_path' parameter as a subprocess to collect heart rate data. If set to 0, a thread will be run in parallel with the 
; app that will directly collect hr data.
use_external_app=1
; Where in the local system Pulse Monitor is installed
external_app_install_path=D:\Program Files\PulseMonitor
; The heart rate monitor's device index/ID. This will likely not change unless there are more than one trackers connected.
hrtracker_index=0
; Whether to use the heart rate tracker. 1 means yes, 0 means no.
use_hrtracker=0
; Whether to emulate a heart rate device for the hr monitor thread. This is mainly useful for development and data captured from the emulator
; will not be sent to the database. Use this if you're testing the app and don't have a heart rate monitor device connected to the computer.
emulate_device=0
; Whether to run the heart rate monitor thread as a daemon. If set to 1, hr monitor thread will run alongside app as a daemon.
; This ensures that the thread will exit along with the app, however, this could cause problems if the thread is not manually stopped.
run_thread_as_daemon=0
; Toggles verbose output of the hr monitor thread. This has little impact on functionality, but is useful when debugging the heart rate monitor.
; Setting this to 1 will allow the hr monitor thread to output to the same console window the app is running on.
verbose=1
; Whether to test the heart rate monitor when the app starts
test_on_startup=0
